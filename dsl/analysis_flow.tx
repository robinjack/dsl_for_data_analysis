Program :
    statement *= Statement
    "end"
    ;

Comment:
  /\/\/.*$/
;

Statement :  Data  | Analysis | Manipulation
| Train | Test | Score  | FunctionCall | Assignment
;

Assignment : (key=ID) "=" (value=Expression);

Expression:
    ArithmeticExpression |  Data | ("(" ArithmeticExpression ")") |
    BooleanExpression | ("(" BooleanExpression ")");



ArithmeticExpression : Sum ;
Sum: op=Product (operator=SumOperator op=Product)*;
Product : op=PowValue (operator=ProductOperator op=PowValue)*;
PowValue: op=Value (operator=PowerOperator op=Value)*;
Value: op=INT  |  ("(" op=Sum ")") | op=ID ;

SumOperator:
    "-" | "+";
ProductOperator:  "*" | "/" ;
PowerOperator: "^";



Data : "LOAD" name=ID fp=STRING;
Analysis: "ANALYSIS" data=ID functionName=[AnalysisFunction] (args*=KeywordParameter[","])?;


Manipulation :
    "MANIPULATION" query=DataSQL ("->" name=ID)?;

DataSQL :
    Select;

Select:
    ("SELECT" | "select")
    ("DISTINCT" | optional="distinct")?
         (maps*=ColExp[","])
    ("FROM" | "from") from_items+=ID[","]
    (("WHERE" | "where") filters=BooleanExpression)?
    (("GROUP BY" | "group by") groups+=ID[","])?
    (("HAVING" | "having") having+=BooleanExpression)?
    ";"
    ;

ColExp :
    (op=BooleanExpression ("AS" | "as") colname=ID) | colname=ExpValue | colname="*";
BoolExp: BooleanExpression | Analysis;
BooleanExpression :  op=BooleanTerm ((operator="OR" | operator="or") op=BooleanTerm)*;
 BooleanTerm : op=NotFactor ((operator="AND" | operator="and") op=NotFactor)*;
 NotFactor: ("NOT")? BooleanFactor;
 BooleanFactor: BooleanLiteral | Relation;
 BooleanLiteral: "TRUE" | "FALSE";
 Relation: op=BoolExpression (operator=RelationalOperator op=BoolExpression)*;
 RelationalOperator: ">" | "<" | "=" | "!=" | "<=" | ">=";
 BoolExpression: Additive;
 Additive: op=ExpProduct (operator=SumOperator op=ExpProduct)*;
 ExpProduct: op=ExpPower (operator=ProductOperator op=ExpPower)*;
 ExpPower: op=ExpValue (operator=PowerOperator op=ExpValue)*;
 ExpValue: op=FunctionCall | op=INT | op=ID | ("(" op=BooleanExpression ")")
 ;

Train: "TRAIN" data=ID  (parameters+=KeywordParameter[","])*;

Test: "TEST" data=ID  (parameters+=KeywordParameter[","])*;

Score: "SCORE" data=ID (parameters+=KeywordParameter[","])*;

AnalysisFunction: Print | Mean | Sum | Count | Percentile | Plot;

Print  : "print" ;
Mean  : "mean" ;
Sum  : "sum" ;
Count  : "count" ;
Percentile  : "percentile" ;
Plot  : "plot";

KeywordParameter:
    param=ID "=" value=Parameter;




FunctionCall: functionName=Function "(" exp+=BoolExp[","] ")";

Parameter:
    value=ID | value=STRING | value = INT | value=FLOAT | value=Expression;

Function:
    "print" | "log" |
    "mean" | "sum" |
     "percentile" |"count" |
    "show" | "target"
    ;

